# -*- coding: utf-8 -*-
"""my_streamlit_datathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T4c31SETmDMgM1ikkRRmHZKJL9_0UbAo

#Streamlit
"""
# Import Library
import streamlit as st
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics.pairwise import cosine_similarity

# Lien de l'image
lien_image = "https://images.pexels.com/photos/704748/pexels-photo-704748.jpeg"

# Afficher l'image
st.sidebar.image(lien_image, use_column_width=True)

# Import dataset
link = "https://raw.githubusercontent.com/The-Pandwa/Datathon/main/df_final_speed_dating_test.csv"
df_final_speed_dating = pd.read_csv(link)

# Création de la sidebar et features
st.sidebar.title('Votre taux de compatibilité :')

# Afficher les résultats
col1, col2 = st.columns([1, 1], gap="large")

#Texte intro


# # Ajouter une image en haut de la colonne
# image_url = "https://images.pexels.com/photos/704748/pexels-photo-704748.jpeg"
# st.image.col1(image_url, use_column_width=True)

# # Ajouter une image en haut de la colonne
# image_url = "https://images.pexels.com/photos/704748/pexels-photo-704748.jpeg"
# st.image.col2(image_url, use_column_width=True)

#Critères
with col1:
    st.write("Choix du premier partenaire:")
    dining_1 =st.slider("Cuisine ", min_value=1, max_value=10, value=None, step=1)
    gaming_1 =st.slider("Gaming ", min_value=1, max_value=10, value=None, step=1)
    clubbing_1 = st.slider("Fêtard", min_value=1, max_value=10, value=None, step=1)
    reading_1 =st.slider("Lecture", min_value=1, max_value=10, value=None, step=1)
    shopping_1 =st.slider("Shopping", min_value=1, max_value=10, value=None, step=1)
    Sports_1 =st.slider("Sports", min_value=1, max_value=10, value=None, step=1)
    Art_1 =st.slider("Art", min_value=1, max_value=10, value=None, step=1)
    Musique_1 = st.slider("Musique", min_value=1, max_value=10, value=None, step=1)
    TV_Cinema_1 =st.slider("TV Cinema", min_value=1, max_value=10, value=None, step=1)
with col2:
    st.write("Choix du second partenaire:")
    dining_2 =st.slider("Cuisine ", min_value=1, max_value=10, value=None, step=1)
    gaming_2 =st.slider("Gaming ", min_value=1, max_value=10, value=None, step=1)
    clubbing_2 = st.slider("Fêtard", min_value=1, max_value=10, value=None, step=1)
    reading_2 =st.slider("Lecture", min_value=1, max_value=10, value=None, step=1)
    shopping_2 =st.slider("Shopping", min_value=1, max_value=10, value=None, step=1)
    Sports_2 =st.slider("Sports", min_value=1, max_value=10, value=None, step=1)
    Art_2 =st.slider("Art", min_value=1, max_value=10, value=None, step=1)
    Musique_2 = st.slider("Musique", min_value=1, max_value=10, value=None, step=1)
    TV_Cinema_2 =st.slider("TV Cinema", min_value=1, max_value=10, value=None, step=1)

# Préparer les données pour le modèle
user_1_input = np.array([[dining_1, gaming_1, clubbing_1, reading_1, shopping_1, Sports_1, Art_1, Musique_1, TV_Cinema_1]])
# Préparer les données pour le modèle
user_2_input = np.array([[dining_2, gaming_2, clubbing_2, reading_2, shopping_2, Sports_2, Art_2, Musique_2, TV_Cinema_2]])
if st.button("Vous matchez ou pas? "):
    X = df_final_speed_dating[['dining', 'gaming', 'clubbing', 'reading', 'shopping', 'Sports', 'Art', 'Musique', 'TV_Cinema']]
    y = df_final_speed_dating['match']
    
    # Division des données en ensemble d'entraînement et ensemble de test
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=36, train_size=0.75)
    
    # Sélection des caractéristiques choisies par l'utilisateur pour l'entraînement
    selected_features = ['dining', 'gaming', 'clubbing', 'reading', 'shopping', 'Sports', 'Art', 'Musique', 'TV_Cinema']
    X_selected = df_final_speed_dating[selected_features]
    X_train_selected, X_test_selected, y_train, y_test = train_test_split(X_selected, y, random_state=36, train_size=0.75)
    
    # Entraînement du modèle de régression logistique
    model = LogisticRegression().fit(X_train, y_train)
    
    # Probabilité de prédiction pour les classes
    resultat =[]
    for i, j in zip(model.classes_, model.predict_proba(X_test)[0]*100):
        resultat.append(j)
    if resultat[0]>resultat[1]:
        st.write("Pas Match Aîe aîe aîe, ça sent le sapin entre vous !")
    else:
        st.write("Match Chaude soirée en perspective !")
    
    # Calcul de la similarité cosinus entre les deux utilisateurs
    similarity = cosine_similarity(user_1_input, user_2_input)
    percent_similarity = st.sidebar.write(similarity[0][0])
            
    #Affiche des films
    films_rom = pd.read_csv("https://raw.githubusercontent.com/The-Pandwa/Datathon/main/films_rom.csv")
    
    # Système de recommandation
    st.write("Voici nos recommandations :")
    
    # Création des DF en fonction de conditions par popularité
    
    df_0 = films_rom.loc[films_rom['Note'] > 7.5]
    df_20 = films_rom.loc[(films_rom['Note'] > 6.8) & (films_rom['Note'] <= 7.5)]
    df_40 = films_rom.loc[(films_rom['Note'] > 6.608) & (films_rom['Note'] <= 6.8)]
    df_60 = films_rom.loc[(films_rom['Note'] > 6.51) & (films_rom['Note'] <= 6.607)]
    df_80 = films_rom.loc[films_rom['Note'] < 6.51]
    
    # Fonction pour affichage des poster de films
    def recommandation(df):
        col0, col1= st.columns(2)
        with col0:
            full_link_0="https://image.tmdb.org/t/p/w500" +df['Affiche'].iloc[0]
            st.image(full_link_0)
            st.write(df['Titre'].iloc[0])
        with col1:
            full_link_1="https://image.tmdb.org/t/p/w500" +df['Affiche'].iloc[1]
            st.image(full_link_1)
            st.write(df['Titre'].iloc[1])
    
    # Affichage en fonction de la similarité
    if similarity < 0.19:
        recommandation(df_0)
    elif 0.20 <= similarity < 0.39:
        recommandation(df_20)
    elif 0.40 <= similarity < 0.59:
        recommandation(df_40)
    elif 0.60 <= similarity < 0.79:
        recommandation(df_60)
    else:
        recommandation(df_80)
